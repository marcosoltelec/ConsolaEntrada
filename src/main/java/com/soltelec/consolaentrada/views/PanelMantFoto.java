/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.consolaentrada.views;

import com.soltelec.consolaentrada.configuration.Conexion;
import com.soltelec.consolaentrada.custom.ModeloTablaHojas;
import com.soltelec.consolaentrada.custom.ModeloTablaPruebas;
import com.soltelec.consolaentrada.models.controllers.VehiculoJpaController;
import com.soltelec.consolaentrada.models.controllers.HojaPruebasJpaController;
import com.soltelec.consolaentrada.models.controllers.PruebaJpaController;
import com.soltelec.consolaentrada.models.entities.HojaPruebas;
import com.soltelec.consolaentrada.models.entities.Prueba;
import com.soltelec.consolaentrada.models.entities.*;
import com.soltelec.consolaentrada.reporte.ImpresionReporte;
import com.soltelec.consolaentrada.utilities.Mensajes;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.awt.geom.AffineTransform;
import java.awt.image.RenderedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.filechooser.FileNameExtensionFilter;
/**
 *
 * @author GerenciaDesarrollo
 */
public class PanelMantFoto extends javax.swing.JPanel {

    private Integer idHojaPrueba = -1;
    private HojaPruebas ctxHP = null;
    private HojaPruebasJpaController hpCon;

    /**
     * Creates new form PanelImpresionByPlaca
     */
    public PanelMantFoto() {
        initComponents();
        ImageIcon imageOn = new ImageIcon(getClass().getResource("/com/soltelec/consolaentrada/images/Sin_imagen.png"));
        this.jlFoto1.setIcon(imageOn);
        this.jlFoto2.setIcon(imageOn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnAtras = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPlaca = new javax.swing.JTextField();
        cmbRevision = new javax.swing.JComboBox();
        btnCambiarFoto = new javax.swing.JButton();
        jlFoto1 = new javax.swing.JLabel();
        jlFoto2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnImprimir1 = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1100, 32767));
        setPreferredSize(new java.awt.Dimension(1092, 514));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Mantenimiento Foto");

        btnAtras.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnAtras.setText("Salir ");
        btnAtras.setPreferredSize(new java.awt.Dimension(140, 40));
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnImprimir.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnImprimir.setText("Borrar Fotos");
        btnImprimir.setToolTipText("");
        btnImprimir.setPreferredSize(new java.awt.Dimension(140, 40));
        btnImprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImprimirMouseClicked(evt);
            }
        });
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Placa");

        txtPlaca.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtPlaca.setPreferredSize(new java.awt.Dimension(220, 40));
        txtPlaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlacaActionPerformed(evt);
            }
        });
        txtPlaca.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPlacaFocusLost(evt);
            }
        });
        txtPlaca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPlacaKeyTyped(evt);
            }
        });

        cmbRevision.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbRevisionItemStateChanged(evt);
            }
        });

        btnCambiarFoto.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnCambiarFoto.setText("Cambiar Foto");
        btnCambiarFoto.setToolTipText("");
        btnCambiarFoto.setPreferredSize(new java.awt.Dimension(140, 40));
        btnCambiarFoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCambiarFotoMouseClicked(evt);
            }
        });
        btnCambiarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarFotoActionPerformed(evt);
            }
        });

        jlFoto1.setToolTipText("");
        jlFoto1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jlFoto1.setOpaque(true);

        jlFoto2.setToolTipText("");
        jlFoto2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jlFoto2.setOpaque(true);

        jLabel3.setBackground(new java.awt.Color(102, 102, 102));
        jLabel3.setToolTipText("");
        jLabel3.setOpaque(true);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        btnImprimir1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnImprimir1.setText("CerrarPrueba");
        btnImprimir1.setToolTipText("");
        btnImprimir1.setPreferredSize(new java.awt.Dimension(140, 40));
        btnImprimir1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImprimir1MouseClicked(evt);
            }
        });
        btnImprimir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimir1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(41, 41, 41)
                                    .addComponent(jLabel2)
                                    .addGap(28, 28, 28)
                                    .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27)
                                    .addComponent(cmbRevision, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(35, 35, 35)
                                    .addComponent(btnCambiarFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(22, 22, 22)
                                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(164, 164, 164)
                            .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnImprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(23, 23, 23))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(61, 61, 61)
                                    .addComponent(jlFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(49, 49, 49)
                                    .addComponent(jlFoto2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(176, 176, 176))
                                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 1304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 322, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbRevision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCambiarFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnImprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlFoto1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlFoto2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(1, 1, 1)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        this.txtPlaca.setText("");
        ImageIcon imageOn = new ImageIcon(getClass().getResource("/com/soltelec/consolaentrada/images/Sin_imagen.png"));
        this.jlFoto1.setIcon(imageOn);
        this.jlFoto2.setIcon(imageOn);
        this.cmbRevision.removeAllItems();
        ViewManager.getInstance().showPrincipal();


    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void txtPlacaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPlacaKeyTyped

    }//GEN-LAST:event_txtPlacaKeyTyped

    private void txtPlacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlacaActionPerformed

    }//GEN-LAST:event_txtPlacaActionPerformed

    private void txtPlacaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlacaFocusLost

        if (txtPlaca.getText().length() > 4) {
            hpCon = new HojaPruebasJpaController();
            List<HojaPruebas> lstHoja = hpCon.findHPbyVehiculo(txtPlaca.getText());
            if (lstHoja.size() == 0) {
                JOptionPane.showMessageDialog(null, "DISCULPE; Este vehiculo no posee HojaPrueba AUTORIZADA");
                return;
            }
            ctxHP = lstHoja.iterator().next();
            if (ctxHP.getReinspeccionList().size() > 0) {
                cmbRevision.addItem("2da. Revision ");
            } else {
                cmbRevision.addItem("1era. Revision ");
            }
        } else {
            ImageIcon imageOn = new ImageIcon(getClass().getResource("/com/soltelec/consolaentrada/images/Sin_imagen.png"));
            this.jlFoto1.setIcon(imageOn);
            this.jlFoto2.setIcon(imageOn);
        }
    }//GEN-LAST:event_txtPlacaFocusLost

    private void cmbRevisionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRevisionItemStateChanged

    }//GEN-LAST:event_cmbRevisionItemStateChanged

    private void btnCambiarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarFotoActionPerformed
        // TODO add your handling code here:
        /**/
    }//GEN-LAST:event_btnCambiarFotoActionPerformed

    private void btnCambiarFotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCambiarFotoMouseClicked
        try {                                            
           // try {
                int w=0;
                int h=0;
                String sql = null;
                Connection cn;
                cn = DriverManager.getConnection(Conexion.getUrl(), Conexion.getUsuario(), Conexion.getContrasena());
                if (ctxHP.getFotosList().size() == 0) {
                    JOptionPane.showMessageDialog(null, "Disculpe; en estos momentos no se encuentra REGISTRADO ninguna Foto");
                    return;
                }
                Fotos ft = ctxHP.getFotosList().iterator().next();
                InputStream inpStrFoto = new ByteArrayInputStream(ft.getFoto1());
                BufferedImage foto1 = ImageIO.read(inpStrFoto);
                inpStrFoto = new ByteArrayInputStream(ft.getFoto2());
                BufferedImage foto2 = ImageIO.read(inpStrFoto);
                if (((String) cmbRevision.getSelectedItem()).equalsIgnoreCase("1era. Revision ")) {
                    ImageIcon imageOn = new ImageIcon(foto1);
                    jlFoto1.setIcon(imageOn);
                    ImageIcon imageOn2 = new ImageIcon(foto2);
                    jlFoto2.setIcon(imageOn2);
                    w=imageOn.getIconWidth();
                    h=imageOn.getIconHeight();
                } else {
                    foto1 = split(foto1)[1];
                    foto2 = split(foto2)[1];
                    w=640;
                    h=480;
                }
                ImageIcon icono = null;
                if (((String) cmbRevision.getSelectedItem()).equalsIgnoreCase("2da. Revision ")) 
                {
                    if (ft.getNumeroRevision() == 2) 
                    {
                        ImageIcon imageOn = new ImageIcon(getClass().getResource("/com/soltelec/consolaentrada/images/Sin_imagen.png"));
                        jlFoto1.setIcon(imageOn);
                        jlFoto2.setIcon(imageOn);
                        w=imageOn.getIconWidth();
                        h=imageOn.getIconHeight();
                    }
                }
                System.out.println("Voy a comenzar a modificar la foto");
                String[] numf = {"1","2"};
                String resp = (String) JOptionPane.showInputDialog(null, "Seleccione el numero de la foto que desea modificar", "Cambiar Foto", JOptionPane.DEFAULT_OPTION,null, numf, null);
                System.out.println("Vamos a actualizar la foto: "+ resp+" para "+ctxHP.getId());
                if(resp!=null)
                {
                    JFileChooser jf = new JFileChooser();
                    FileNameExtensionFilter filtro = new FileNameExtensionFilter("JPG y PNG","jpg","png");
                    jf.setFileFilter(filtro);
                    jf.showOpenDialog(this);
                    File archivo =jf.getSelectedFile();
                    ImageIcon icon = new ImageIcon(archivo.toString());
                    int fresp = JOptionPane.showConfirmDialog(null, "¿La foto que desea modificar cuenta con fecha?", "Cambiar Foto!", JOptionPane.YES_NO_OPTION);
                    System.out.println(fresp+ " w: " +w +" h: " +h );
                    BufferedImage bi= new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
                    Graphics g = bi.createGraphics();
                    g.drawImage(icon.getImage(), 0, 0,w,h, this);
                    
                if (fresp==0)
                {
                    System.out.print("Vamos a guardar imagen");
                    icon =new ImageIcon(bi);
                }else{
                    String dnf= JOptionPane.showInputDialog(null, "¿Que fecha desea colocar?", "AAAA-MM-dd HH:mm");
                    g.setColor(java.awt.Color.CYAN);
                    Font font = new Font("Serif", 1, 24);
                    g.setFont(font);
                    dnf = dnf +" "+txtPlaca.getText().toUpperCase();
                    System.out.println(" cadena Date is: "+dnf);
                    g.drawString(dnf, 5, h - font.getSize() / 2 - 5);
                    g.dispose();
                    icon =new ImageIcon(bi);
                }
                if(Integer.parseInt(resp)==1)
                {
                    jlFoto2.setText(null);
                    jlFoto2.setIcon(icon);
                    fresp = JOptionPane.showConfirmDialog(null, "La foto de la derecha es la nueva imagen.¿Desea guardarla asi?", "Confirmacion Cambio de Foto!!!", JOptionPane.YES_NO_OPTION);
                    sql="UPDATE fotos SET Foto1=? WHERE id_hoja_pruebas_for=?";
                }else{
                    jlFoto1.setText(null);
                    jlFoto1.setIcon(icon);
                    fresp = JOptionPane.showConfirmDialog(null, "La foto de la izquierda es la nueva imagen.¿Desea guardarla asi?", "Confirmacion Cambio de Foto!!!", JOptionPane.YES_NO_OPTION);
                    sql = "UPDATE fotos SET Foto2=? WHERE id_hoja_pruebas_for=?";
                }
                try 
                {
                    Thread.sleep(500);
                    if(fresp==0)
                    {
                        PreparedStatement stmt = cn.prepareStatement(sql);
                        System.out.println("SQL: "+sql);
                        stmt.setLong(2, ctxHP.getId());
                        ByteArrayOutputStream out = new ByteArrayOutputStream();
                        ImageIO.write((RenderedImage)icon.getImage(), "JPEG", out);
                        InputStream in = new ByteArrayInputStream(out.toByteArray());
                        stmt.setBinaryStream(1, in);
                        stmt.execute();
                        JOptionPane.showMessageDialog(null, "Operación realizada correctamente");
                        System.out.print("Guardada exitosamente");
                        
                        this.txtPlaca.setText("");
                        ImageIcon imageOn = new ImageIcon(getClass().getResource("/com/soltelec/consolaentrada/images/Sin_imagen.png"));
                        this.jlFoto1.setIcon(imageOn);
                        this.jlFoto2.setIcon(imageOn);
                        this.cmbRevision.removeAllItems();
                        ViewManager.getInstance().showPrincipal();

                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(PanelMantFoto.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            }catch (IOException ex) {
            } catch (SQLException ex) {
                Logger.getLogger(PanelMantFoto.class.getName()).log(Level.SEVERE, null, ex);
            }
        
               
           /* try {
                Thread.sleep(1500);
            } catch (InterruptedException ex) {
                Logger.getLogger(PanelMantFoto.class.getName()).log(Level.SEVERE, null, ex);
            }
            Fotos ft = ctxHP.getFotosList().iterator().next();
            ByteArrayInputStream inpStrFoto = new ByteArrayInputStream(ft.getFoto1());
            BufferedImage foto1 = ImageIO.read(inpStrFoto);
            inpStrFoto = new ByteArrayInputStream(ft.getFoto2());
            BufferedImage foto2 = ImageIO.read(inpStrFoto);
            ImageIcon imageOn = new ImageIcon(foto1);
            jlFoto1.setIcon(imageOn);
            ImageIcon imageOn2 = new ImageIcon(foto2);
            jlFoto2.setIcon(imageOn2);
        */
    }//GEN-LAST:event_btnCambiarFotoMouseClicked

    private void btnImprimirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImprimirMouseClicked
        try {
            Fotos ctxFt = ctxHP.getFotosList().iterator().next();
            InputStream inpStrFoto = new ByteArrayInputStream(ctxFt.getFoto1());
            BufferedImage foto1 = ImageIO.read(inpStrFoto);
            InputStream inpStrFoto2 = new ByteArrayInputStream(ctxFt.getFoto2());
            BufferedImage foto2 = ImageIO.read(inpStrFoto2);
            InputStream in;
            InputStream in2;
            if (((String) cmbRevision.getSelectedItem()).equalsIgnoreCase("1era. Revision ")) {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                in = new ByteArrayInputStream(out.toByteArray());
                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                in2 = new ByteArrayInputStream(out2.toByteArray());
                for (Prueba p : ctxHP.getListPruebas()) {
                    if (p.getTipoPrueba().getId() == 3) {
                        p.setFinalizada("N");
                        p.setAprobado("N");
                        PruebaJpaController pru = new PruebaJpaController();
                        try {
                            pru.edit(p);
                            break;
                        } catch (Exception ex) {
                        }
                    }
                }
            } else {
                foto1 = split(foto1)[0];
                foto2 = split(foto2)[0];
                AffineTransform at = AffineTransform.getScaleInstance(2, 2);//matriz de transformacion
                BufferedImage nuevaImagenEscalada = new BufferedImage((int) 640, (int) 480, BufferedImage.TYPE_INT_RGB);
                nuevaImagenEscalada.createGraphics().drawRenderedImage(foto1, at);
                BufferedImage nuevaImagenEscalada2 = new BufferedImage((int) 640, (int) 480, BufferedImage.TYPE_INT_RGB);
                nuevaImagenEscalada2.createGraphics().drawRenderedImage(foto2, at);
                //eve=nuevaImagenEscalada.getWidth();
                //rei=nuevaImagenEscalada.getHeight();
                String formato = "JPEG";
                // Image imagenConcatenada = concatenarImagenes(foto1, nuevaImagenEscalada);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                ImageIO.write((RenderedImage) nuevaImagenEscalada, formato, out);//Escribe la imagen concatenada                            
                in = new ByteArrayInputStream(out.toByteArray());
                ByteArrayOutputStream out2 = new ByteArrayOutputStream();
                ImageIO.write((RenderedImage) nuevaImagenEscalada2, formato, out2);//Escribe la imagen concatenada                            
                in2 = new ByteArrayInputStream(out2.toByteArray());
                Reinspeccion rei = ctxHP.getReinspeccionList().iterator().next();
                for (Prueba p : rei.getPruebaList()) {
                    if (p.getTipoPrueba().getId() == 3) {
                        p.setFinalizada("N");
                        p.setAprobado("N");
                        PruebaJpaController pru = new PruebaJpaController();
                        try {
                            pru.edit(p);
                        } catch (Exception ex) {
                        }
                    }
                }
            }
            PreparedStatement pstmt = null;
            Connection connect;
            connect = DriverManager.getConnection(Conexion.getUrl(), Conexion.getUsuario(), Conexion.getContrasena());
            if (((String) cmbRevision.getSelectedItem()).equalsIgnoreCase("1era. Revision ")) {
                pstmt = connect.prepareStatement("delete  from fotos  where id_hoja_pruebas_for= ?");
                pstmt.setInt(1, ctxHP.getId());
            } else {
                pstmt = connect.prepareStatement("update  fotos set fotos.Foto1 = ?, fotos.Foto2 = ?, fotos.numeroRevision=2 where id_hoja_pruebas_for= ?");
                pstmt.setBinaryStream(1, in);
                pstmt.setBinaryStream(2, in2);
                pstmt.setInt(3, ctxHP.getId());
            }
            pstmt.executeUpdate();
            ImageIcon imageOn = new ImageIcon(getClass().getResource("/com/soltelec/consolaentrada/images/Sin_imagen.png"));
            jlFoto1.setIcon(imageOn);
            jlFoto2.setIcon(imageOn);
            JOptionPane.showMessageDialog(null, "Se ha Borrado la presente Foto con EXITO");
        } catch (IOException | SQLException ex) {
            Logger.getLogger(PanelMantFoto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnImprimirMouseClicked

    private void btnImprimir1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImprimir1MouseClicked
        for (Prueba p : ctxHP.getListPruebas()) {
            if (p.getTipoPrueba().getId() == 3) {
                p.setFinalizada("Y");
                p.setAprobado("Y");
                PruebaJpaController pru = new PruebaJpaController();
                try {
                    pru.edit(p);
                    break;
                } catch (Exception ex) {
                }
            }
        }
    }//GEN-LAST:event_btnImprimir1MouseClicked

    private void btnImprimir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimir1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnImprimir1ActionPerformed

    private BufferedImage[] split(BufferedImage image) {
        try {
            int rows = 2; //You should decide the values for rows and cols variables
            int cols = 2;
            int chunks = rows * cols;
            BufferedImage imgs[] = new BufferedImage[chunks]; //Image array to hold image chunks

            int eve = image.getWidth();
            int rei = image.getHeight();
            int chunkWidth = image.getWidth() / cols; // determines the chunk width and height
            int chunkHeight = image.getHeight() / rows;
            int count = 0;
            for (int x = 0; x < rows; x++) {
                for (int y = 0; y < cols; y++) {
                    imgs[count] = new BufferedImage(chunkWidth, chunkHeight, image.getType());
                    Graphics2D gr = imgs[count++].createGraphics();
                    gr.drawImage(image, 0, 0, chunkWidth, chunkHeight, chunkWidth * y, chunkHeight * x, chunkWidth * y + chunkWidth, chunkHeight * x + chunkHeight, null);
                    gr.dispose();
                }
            }
            return imgs;
        } catch (Exception e) {
            return null;
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame();
        frame.getContentPane().add(new PanelMantFoto());
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnCambiarFoto;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnImprimir1;
    private javax.swing.JComboBox cmbRevision;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel jlFoto1;
    private javax.swing.JLabel jlFoto2;
    private javax.swing.JTextField txtPlaca;
    // End of variables declaration//GEN-END:variables
}
